const ValidatorFormats = [
  { label: "URL", value: "url" },
  { label: "Email", value: "email" },
  { label: "Number", value: "number" },
  { label: "Integer", value: "integer" },
  { label: "ID", value: "idcard" },
  { label: "Phone Number", value: "phone" },
  { label: "Currency", value: "money" },
  { label: "Chinese", value: "zh" },
  { label: "Date", value: "date" },
  { label: "Zip", value: "zip" },
];

export default {
  "en-US": {
    settings: {
      "x-validator": {
        title: "Validator",
        addValidatorRules: "Add Validator Rules",
        drawer: "Edit Rules",
        triggerType: {
          title: "Trigger Type",
          placeholder: "Please Select",
          dataSource: ["onInput", "onFocus", "onBlur"],
        },
        format: {
          title: "Format",
          placeholder: "Please Select",
          dataSource: ValidatorFormats,
        },
        validator: {
          title: "Custom Validator",
          tooltip: 'Format: function (value){ return "Error Message"}',
        },
        pattern: "RegExp",
        len: "Length Limit",
        max: "Length/Value Lt",
        min: "Length/Value Gt",
        exclusiveMaximum: "Length/Value Lte",
        exclusiveMinimum: "Length/Value Gte",
        whitespace: "No Whitespace",
        required: "Required",
        message: {
          title: "Error Message",
          tooltip:
            "The error message is only effective for one built-in rule of the current rule set. If you need to customize the error message for different built-in rules, please split into multiple rules",
        },
      },
    },
    SettingComponents: {
      ValueInput: {
        expression: "Expression",
      },
      MonacoInput: {
        helpDocument: "Help Documents",
      },
      DataSourceSetter: {
        nodeProperty: "Node Property",
        pleaseSelectNode: "please select node from the tree on the left",
        addKeyValuePair: "Add Key Value Pair",
        configureDataSource: "Configure",
        dataSource: "Options",
        defaultTitle: "Default Title",
        dataSourceTree: "Options Tree",
        addNode: "Add Node",
        label: "label",
        value: "value",
        item: "Item",
      },
      RequestSourceSetter: {
        configureRequest: "Configure",
        dataSourceTree: "DataSource Tree",
        addNode: "Add DataSource",
        defaultTitle: "Default Title",
        dataSourceTitle: "DataSource Title",
        nodeProperty: "Data Source Property",
        pleaseSelectNode: "please select item from the list on the left",
        title: 'Title',
        name: 'Name',
        description: "Description",
        requestPath: 'Request Path',
        requestMethod: 'Request Method',
        requestParam: 'Request Param',
        requestBody: 'Request Body',
        requestHeader: 'Request Header',
        addition: "Add"
      },
      FormEffectSetter: {
        configureFormEffect: "Configure",
        fromPath: 'Form Fields',
        pleaseSelect: "Please Select",
        fieldTitle: "Field Title",
        fieldName: "Field Name",
        fieldPath: "Field Path",
        operations: "Operations",
        addFormField: "Add Form Field",
        fieldType: "Field Type",
        formEffectHook: 'Form Effects Hook',
        onFormInit: 'onFormInit',
        onFormMount: 'onFormMount',
        onFormUnmount: 'onFormUnmount',
        onFormReact: 'onFormReact',
        onFormValuesChange: 'onFormValuesChange',
        onFormInitialValuesChange: 'onFormInitialValuesChange',
        onFormInputChange: 'onFormInputChange',
        onFormSubmit: 'onFormSubmit',
        onFormSubmitStart: 'onFormSubmitStart',
        onFormSubmitEnd: 'onFormSubmitEnd',
        onFormSubmitFailed: 'onFormSubmitFailed',
        onFormSubmitSuccess: 'onFormSubmitSuccess',
        onFormSubmitValidateStart: 'onFormSubmitValidateStart',
        onFormSubmitValidateEnd: 'onFormSubmitValidateEnd',
        onFormSubmitValidateFailed: 'onFormSubmitValidateFailed',
        onFormSubmitValidateSuccess: 'onFormSubmitValidateSuccess',
        onFormValidateStart: 'onFormValidateStart',
        onFormValidateEnd: 'onFormValidateEnd',
        onFormValidateFailed: 'onFormValidateFailed',
        onFormValidateSuccess: 'onFormValidateSuccess',
        onFormGraphChange: 'onFormGraphChange',
        onFormLoading: 'onFormLoading',
        expressionValueTypeIs: "Expression value type is",
        fieldEffectHook: 'Form Effects Hook',
        onFieldInit: 'onFieldInit',
        onFieldMount: 'onFieldMount',
        onFieldUnmount: 'onFieldUnmount',
        onFieldValueChange: 'onFieldValueChange',
        onFieldInitialValueChange: 'onFieldInitialValueChange',
        onFieldInputValueChange: 'onFieldInputValueChange',
        onFieldValidateStart: 'onFieldValidateStart',
        onFieldValidateEnd: 'onFieldValidateEnd',
        onFieldValidating: 'onFieldValidating',
        onFieldValidateFailed: 'onFieldValidateFailed',
        onFieldValidateSuccess: 'onFieldValidateSuccess',
        onFieldSubmit: 'onFieldSubmit',
        onFieldSubmitStart: 'onFieldSubmitStart',
        onFieldSubmitEnd: 'onFieldSubmitEnd',
        onFieldSubmitValidateStart: 'onFieldSubmitValidateStart',
        onFieldSubmitValidateEnd: 'onFieldSubmitValidateEnd',
        onFieldSubmitSuccess: 'onFieldSubmitSuccess',
        onFieldSubmitFailed: 'onFieldSubmitFailed',
        onFieldSubmitValidateSuccess: 'onFieldSubmitValidateSuccess',
        onFieldSubmitValidateFailed: 'onFieldSubmitValidateFailed',
        onFieldReset: 'onFieldReset',
        onFieldLoading: 'onFieldLoading',
        onFieldReact: 'onFieldReact',
        onFieldChange: 'onFieldChange',
        actionEffects:
          "Form Effects(Optional, Support Javascript Statement)",
      },
      ReactionsSetter: {
        configureReactions: "Configure",
        relationsFields: "Associated Fields",
        variableName: "Variable Name",
        variableNameValidateMessage: "This is not a standard variable name",
        pleaseInput: "Please Input",
        sourceField: "Source Field",
        sourceProperty: "Field Property",
        variableType: "Variable Type",
        operations: "Operations",
        addRelationField: "Add Associated Field",
        propertyReactions:
          "Property Reactions(Only Support Javascript Expression)",
        actionReactions:
          "Action Reactions(Optional, Support Javascript Statement)",
        visible: "Show/None",
        hidden: "Show/UI Hidden",
        display: "Display",
        pattern: "Pattern",
        title: "Title",
        description: "Description",
        value: "Value",
        initialValue: "InitialValue",
        dataSource: "Options",
        required: "Required",
        component: "Component",
        componentProps: "Component Props",
        decorator: "Decorator",
        decoratorProps: "Decorator Props",
        pleaseSelect: "Please Select",
        expressionValueTypeIs: "Expression value type is",
      },
      ValidatorSetter: {
        pleaseSelect: "Please Select",
        formats: ValidatorFormats,
      },
    },
  },
};
